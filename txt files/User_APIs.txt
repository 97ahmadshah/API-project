## All endpoints that require authentication

* Require Authentication: true
* Require proper authorization: Spot must belong to the current user
* Request
  * Method:
  * URL: ?
  * Body: none

* Successful Response
  * Status Code: 200
  * Headers:
    * Content-Type: application/json
  * Body:

    ```json
    {
      "message": "Successfully authenticated",
      "statusCode": 200
    }
    ```

* Error response: Couldn't find a Spot with the specified id
  * Status Code: 401
  * Headers:
    * Content-Type: application/json
  * Body:

    ```json
    {
      "message": "Authentication required",
    }
    ```

#####################################################################################

## GET THE CURRENT USER

Require Authentication: true

Request

Method: GET
URL: /user
Body: none

Successful Response when there is a logged in user
Status Code: 200

Headers:
Content-Type: application/json

Body:
{
  "user": {
    "id": 1,
    "firstName": "John",
    "lastName": "Smith",
    "email": "john.smith@gmail.com",
    "username": "JohnSmith"
  }
}

Successful Response when there is no logged in user
Status Code: 200
Headers:
Content-Type: application/json
Body:
{
  "user": null
}

#####################################################################################

## LOG IN A USER

Logs in a current user with valid credentials and returns the current user's information.
Require Authentication: false
Request

Method: POST

URL: /login

Headers:
Content-Type: application/json

Body:
{
  "credential": "john.smith@gmail.com",
  "password": "secret password"
}

Successful Response
Status Code: 200

Headers:
Content-Type: application/json

Body:
{
  "user": {
    "id": 1,
    "firstName": "John",
    "lastName": "Smith",
    "email": "john.smith@gmail.com",
    "username": "JohnSmith"
  }
}

Error Response: Invalid credentials
Status Code: 401

Headers:
Content-Type: application/json

Body:
{
  "message": "Invalid credentials"
}

Error response: Body validation errors
Status Code: 400

Headers:
Content-Type: application/json

Body:
{
  "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
  "errors": {
    "credential": "Email or username is required",
    "password": "Password is required"
  }
}

#####################################################################################

## GET THE CURRENT USER

Require Authentication: true
Request

Method: GET
URL: /user/:userId

Body: none
Successful Response when there is a logged in user
Status Code: 200

Headers:
Content-Type: application/json

Body:
{
  "user": {
    "id": 1,
    "firstName": "John",
    "lastName": "Smith",
    "email": "john.smith@gmail.com",
    "username": "JohnSmith"
  }
}

Successful Response when there is no logged in user
Status Code: 200

Headers:
Content-Type: application/json

Body:
{
  "user": null
}

#####################################################################################

## LOG IN A USER

Logs in a current user with valid credentials and returns the current user's information.
Require Authentication: false

Request
Method: POST
URL: /login

Headers:
Content-Type: application/json

Body:
{
  "credential": "john.smith@gmail.com",
  "password": "secret password"
}

Successful Response
Status Code: 200

Headers:
Content-Type: application/json

Body:
{
  "user": {
    "id": 1,
    "firstName": "John",
    "lastName": "Smith",
    "email": "john.smith@gmail.com",
    "username": "JohnSmith"
  }
}

Error Response: Invalid credentials
Status Code: 401

Headers:
Content-Type: application/json

Body:
{
  "message": "Invalid credentials"
}

Error response: Body validation errors
Status Code: 400

Headers:
Content-Type: application/json

Body:
{
  "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
  "errors": {
    "credential": "Email or username is required",
    "password": "Password is required"
  }
}

#####################################################################################

## SIGN UP A USER

Creates a new user, logs them in as the current user, and returns the current user's information.
Require Authentication: false

Request
Method: POST
URL: /register

Headers:
Content-Type: application/json

Body:
{
  "firstName": "John",
  "lastName": "Smith",
  "email": "john.smith@gmail.com",
  "username": "JohnSmith",
  "password": "secret password"
}

Successful Response
Status Code: 200

Headers:
Content-Type: application/json

Body:
{
  "user": {
    "id": 1,
    "firstName": "John",
    "lastName": "Smith",
    "email": "john.smith@gmail.com",
    "username": "JohnSmith"
  }
}

Error response: User already exists with the specified email
Status Code: 500

Headers:
Content-Type: application/json

Body:
{
  "message": "User already exists",
  "errors": {
    "email": "User with that email already exists"
  }
}

Error response: User already exists with the specified username
Status Code: 500

Headers:
Content-Type: application/json

Body:
{
  "message": "User already exists",
  "errors": {
    "username": "User with that username already exists"
  }
}

Error response: Body validation errors
Status Code: 400

Headers:
Content-Type: application/json

Body:
{
  "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
  "errors": {
    "email": "Invalid email",
    "username": "Username is required",
    "firstName": "First Name is required",
    "lastName": "Last Name is required"
  }
}

#####################################################################################
