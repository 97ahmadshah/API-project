#####################################################################################
## GET ALL OF THE CURRENT USER'S BOOKINGS
Return all the bookings that the current user has made.
Require Authentication: true

Request
Method: GET
URL: /user/bookings
Body: none

Successful Response
Status Code: 200

Headers:
Content-Type: application/json

Body:
{
  "Bookings": [
    {
      "id": 1,
      "spotId": 1,
      "Spot": {
        "id": 1,
        "ownerId": 1,
        "address": "123 Disney Lane",
        "city": "San Francisco",
        "state": "California",
        "country": "United States of America",
        "lat": 37.7645358,
        "lng": -122.4730327,
        "name": "App Academy",
        "price": 123,
        "previewImage": "image url"
      },
      "userId": 2,
      "startDate": "2021-11-19",
      "endDate": "2021-11-20",
      "createdAt": "2021-11-19 20:39:36",
      "updatedAt": "2021-11-19 20:39:36"
    }
  ]
}

#####################################################################################
## GET ALL BOOKINGS FOR A SPOT BASED ON THE SPOT'S ID
Get all Bookings for a Spot based on the Spot's id
Return all the bookings for a spot specified by id.
Require Authentication: true

Request
Method: GET
URL: /spots/:id/bookings
Body: none

Successful Response: If you ARE NOT the owner of the spot.
Status Code: 200

Headers:
Content-Type: application/json

Body:
{
  "Bookings": [
    {
      "spotId": 1,
      "startDate": "2021-11-19",
      "endDate": "2021-11-20"
    }
  ]
}

Successful Response: If you ARE the owner of the spot.
Status Code: 200

Headers:
Content-Type: application/json

Body:
{
  "Bookings": [
    {
      "User": {
        "id": 2,
        "firstName": "John",
        "lastName": "Smith"
      },
      "id": 1,
      "spotId": 1,
      "userId": 2,
      "startDate": "2021-11-19",
      "endDate": "2021-11-20",
      "createdAt": "2021-11-19 20:39:36",
      "updatedAt": "2021-11-19 20:39:36"
    }
  ]
}

Error response: Couldn't find a Spot with the specified id
Status Code: 404

Headers:
Content-Type: application/json

Body:
{
  "message": "Spot couldn't be found"
}

#####################################################################################
## CREATE A BOOKING FROM A SPOT BASED ON THE SPOT'S ID
Create a Booking from a Spot based on the Spot's id
Create and return a new booking from a spot specified by id.
Require Authentication: true
Require proper authorization: Spot must NOT belong to the current user

Request
Method: POST
URL: /spots/:id/bookings
Body:
{
  "startDate": "2021-11-19",
  "endDate": "2021-11-20"
}

Successful Response
Status Code: 200

Headers:
Content-Type: application/json

Body:
{
  "id": 1,
  "spotId": 1,
  "userId": 2,
  "startDate": "2021-11-19",
  "endDate": "2021-11-20",
  "createdAt": "2021-11-19 20:39:36",
  "updatedAt": "2021-11-19 20:39:36"
}

Error response: Body validation errors
Status Code: 400

Headers:
Content-Type: application/json

Body:
{
  "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
  "errors": {
    "endDate": "endDate cannot be on or before startDate"
  }
}

Error response: Couldn't find a Spot with the specified id
Status Code: 404

Headers:
Content-Type: application/json

Body:
{
  "message": "Spot couldn't be found"
}

Error response: Booking conflict
Status Code: 403

Headers:
Content-Type: application/json

Body:
{
  "message": "Sorry, this spot is already booked for the specified dates",
  "errors": {
    "startDate": "Start date conflicts with an existing booking",
    "endDate": "End date conflicts with an existing booking"
  }
}

#####################################################################################
## EDIT A BOOKING
Update and return an existing booking.
Require Authentication: true
Require proper authorization: Booking must belong to the current user

Request
Method: PUT
URL: /bookings/:id

Headers:
Content-Type: application/json

Body:
{
  "startDate": "2021-11-19",
  "endDate": "2021-11-20"
}

Successful Response
Status Code: 200

Headers:
Content-Type: application/json

Body:
{
  "id": 1,
  "spotId": 1,
  "userId": 2,
  "startDate": "2021-11-19",
  "endDate": "2021-11-20",
  "createdAt": "2021-11-19 20:39:36",
  "updatedAt": "2021-11-20 10:06:40"
}

Error response: Body validation errors
Status Code: 400

Headers:
Content-Type: application/json

Body:
{
  "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
  "errors": {
    "endDate": "endDate cannot come before startDate"
  }
}

Error response: Couldn't find a Booking with the specified id
Status Code: 404

Headers:
Content-Type: application/json

Body:
{
  "message": "Booking couldn't be found"
}

Error response: Can't edit a booking that's past the end date
Status Code: 403

Headers:
Content-Type: application/json

Body:
{
  "message": "Past bookings can't be modified"
}

Error response: Booking conflict
Status Code: 403

Headers:
Content-Type: application/json

Body:
{
  "message": "Sorry, this spot is already booked for the specified dates",
  "errors": {
    "startDate": "Start date conflicts with an existing booking",
    "endDate": "End date conflicts with an existing booking"
  }
}

#####################################################################################
## DELETE A BOOKING
Delete an existing booking.
Require Authentication: true
Require proper authorization: Booking must belong to the current user or the Spot must belong to the current user

Request
Method: DELETE
URL: /bookings/:id
Body: none

Successful Response
Status Code: 200

Headers:
Content-Type: application/json

Body:
{
  "message": "Successfully deleted"
}

Error response: Couldn't find a Booking with the specified id
Status Code: 404

Headers:
Content-Type: application/json

Body:
{
  "message": "Booking couldn't be found"
}

Error response: Bookings that have been started can't be deleted
Status Code: 403

Headers:
Content-Type: application/json

Body:
{
  "message": "Bookings that have been started can't be deleted"
}

#####################################################################################
